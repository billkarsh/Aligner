
============================
Fetching the code from git
============================

Bill's alignment repository (master) source code lives in directory:


<https://github.com/billkarsh/Alignment_Projects>


Janelia legacy:
</groups/apig/share/git-repos/Alignment_Projects.pub>

Assuming git is installed and available (appears to be true
within qlogin sessions but not on login nodes)...

(0) > mkdir my_local_bill_copy
(1) > cd my_local_bill_copy
(2) > git init
(3) > git remote add billk /groups/apig/share/git-repos/Alignment_Projects.pub
(4) > git fetch billk
(5) > git checkout remotes/billk/master

===============
Set path data
===============

(0) Decide where you want build output bins to live;
mkdir if needed. There are a lot of binaries, so having them in their own place makes
it easy to clean everything by deleting that folder. You will
need to update your bash_profile/PATH variable (see below).

(1) Copy file 00_ENV/aln_makefile_std_defs to some directory of yours
that is outside of the git folder, so updates to git will not overwrite your custom path data.

(2) Edit your copy of aln_makefile_std_defs...
(2a) Redefine PATH_SRCCODE to point to your copy of the source code.
(2b) Redefine PATH_BIN to point to your choice from step (0).
(2c) If you are not running on the HHMI/Janelia cluster, then you need to point the
PATH_XXX variables to your local copies of library and include directories for {libtiff, libpng, zlib}.
You will also need to do that for the fftw package, unless you can use
Intel MKL support for FFT operations. MKL is prefered because the code is
fully reentrant allowing more efficient multithreading.

(3) All our make files have this include statement:
"include $(ALN_LOCAL_MAKE_PATH)/aln_makefile_std_defs"

So you must edit your bash_profile and define ALN_LOCAL_MAKE_PATH:
"export ALN_LOCAL_MAKE_PATH=/groups/~location_of_my_std_defs"

(Example bash_profile edits below).

//--- Retired ---
// No longer depend upon SuperLU
//
// (4) Edit 00_ENV/getsharedbins.sht...
// (4a) Redefine myDst to point to your choice from step (0).
// (4b) This file will also be overwritten by updates to git,
// so you might copy it out of the git folder, or just remember to
// edit it again as needed. I like having it with to the master
// make files 00_ENV/1_makeAll etc. to keep all the build scripts together.
//--- Retired ---

====================
Edit .bash_profile
====================

Our bash_profile includes these lines:

# ---------------------------------------------------------
# Alignment specific definitions
#

# Set path for local builds
export ALN_LOCAL_MAKE_PATH=/groups/apig/tomo

# Set universal mrc image file margin
export MRC_TRIM=12

# Append paths to needed binaries
PATH=$PATH:$HOME/bin
PATH=$PATH:/groups/apig/tomo/lou_stuff/binaries
export PATH

# Set place to look for libpng14 library
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64
export LD_LIBRARY_PATH

# Disable Intel MKL internal threading
export MKL_NUM_THREADS=1

#
# End alignment definitions
# ---------------------------------------------------------

====================
Edit .bashrc
====================

Compiles against the MPI libraries require symbol definitions.
Here's our full bashrc file:

# ---------------------------------------------------------
# .bashrc

# User specific aliases and functions

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi


# Use Intel compiler for MPI
if [ -f /usr/local/INTEL2013.sh ]; then
     . /usr/local/INTEL2013.sh
fi


# If you do not have /usr/local/INTEL2013.sh use the following two lines:
# source /usr/local/intel/bin/compilervars.sh intel64
# source /usr/local/intel/impi/4.1.3.048/bin64/mpivars.sh



export I_MPI_DEBUG=0
export I_MPI_RENDEZVOUS_RDMA_WRITE=1
export I_MPI_DEVICE=rdssm:OpenIB-iwarp
export I_MPI_FALLBACK_DEVICE=0
export I_MPI_USE_DYNAMIC_CONNECTIONS=0
# export I_MPI_OFA_USE_XRC=1
# export I_MPI_OFA_DYNAMIC_QPS=1

#
# End bashrc
# ---------------------------------------------------------

====================
Build the code
====================

Good idea to build the code on the target machine. So if you will run on
the cluster then log on to a cluster node and build there.

The core pipeline code is composed by projects labeled '1_XXX' while other
handy utilities that you might/not be interested in are labeled '2_XXX'.
Other stuff is mainly for Bill's development work. Useful targets for the make command:

> make all1		# build all 1_XXX
> make all2		# build all 2_XXX
> make 			# build 1_ & 2_ (same as 'make all')
> make clean	# remove all {.o,.a} but keep .exe

Standard way to make everything:

(1) > cd 00_ENV
(2) > make

// --- Retired ---
// (3) > ./getsharedbins.sht
// --- Retired ---

======================
Script type '.sht'
======================

Scripts generally use bash shell (.sh), but I choose to name my files (.sht) for
'bash text'. In my linux GUI (KDE) I have mapped double-clicks on (.sht)
files to KEDIT.exe because I more often read and edit scripts than run them (so I can check what I'm about to do).



